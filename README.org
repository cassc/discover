#+title: Discover -- a source code static analyzer.
#+author: Ta Quang Trung
#+copyright: SBIP - Singapore Blockchain Innovation Program.

* Installation
** Prerequisite:
   Preferably Ubuntu / Linux Mint. The following commands are tested and
   work well with Linux Mint / Ubuntu 20.

*** Tools and libraries

    - LLVM and Clang version 11 (11.0 or 11.1)
      + Install LLVM and Clang 11 from Linux repositories:

        #+begin_src sh
        # Ubuntu, Linux Mint
        sudo apt-get install llvm-11 llvm-11-dev clang-11 libclang-11-dev

        # Arch Linux, Manjaro
        sudo pacman -S llvm11 clang11
        #+end_src

      + IMPORTANT: if LLVM and Clang 11 cannot be installed automatically, then
        download the file ~clang+llvm-11.1.0-x86_64-linux-gnu-ubuntu-20.10.tar.xz~
        (or the corresponding version) from LLVM GitHub [[https://github.com/llvm/llvm-project/releases/tag/llvmorg-11.1.0][releases]] and move it to
        ~$HOME/llvm/llvm-11~. Then, run the following commands to update the
        environment variables:

        #+begin_src sh
        export PATH=$HOME/llvm/llvm-11/bin:$PATH
        export LD_LIBRARY_PATH=$HOME/llvm/llvm-11/lib:$LD_LIBRARY_PATH
        #+end_src

      + Build LLVM from source code:

        #+begin_src sh
        # prepare env
        cd llvm-project
        mkdir build
        cd build

        # create Make file
        cmake -G Ninja ../llvm -DCMAKE_INSTALL_PREFIX=/home/trungtq/llvm/llvm-11 -Wno-dev

        # compile
        ninja
        #+end_src

    - CMake, zlib, libedit, z3

      #+begin_src sh
      # Ubuntu, Linux Mint
      sudo apt-get install cmake zlib1g-dev libedit-dev z3

      # Arch Linux, Manjaro
      sudo pacman -S cmake zlib z3 libedit
      #+end_src

*** Gollvm for compiling Hyperledger Fabric smart contracts

    - Install ninja-build

      #+begin_src sh
      sudo apt-get install clang-11 ninja-build
      #+end_src

    - Run the following instructions to install =gollvm=.

      #+begin_src sh
      export LLVMDIR=$HOME/llvm                   # path to LLVM directory

      mkdir -p $LLVMDIR/src
      cd $LLVMDIR/src
      git clone https://github.com/llvm/llvm-project.git llvm-project-gollvm

      export LLVMGOLLVM=$LLVMDIR/src/llvm-project-gollvm
      cd $LLVMGOLLVM/llvm/tools
      git clone https://go.googlesource.com/gollvm

      cd $LLVMGOLLVM/llvm/tools/gollvm
      git clone https://go.googlesource.com/gofrontend

      cd $LLVMGOLLVM/llvm/tools/gollvm/libgo
      git clone https://github.com/libffi/libffi.git
      git clone https://github.com/ianlancetaylor/libbacktrace.git
      #+end_src

    - Checkout the following commit for LLVM-11-compatible version:

      #+begin_src sh
      # Git revisions for working with LLVM 11
      # LLVM: 43ff75f2c3feef64f9d73328230d34dac8832a91
      # gollvm: 44a7a475cfd3b871b7a5a0941b8ab1ea9d489adc
      # gofrontend: be0d2cc2df9f98d967c242594838f86362dae2e7
      # libbacktrace: 5a99ff7fed66b8ea8f09c9805c138524a7035ece
      # libffi: 737d4faa00d681b4c758057f67e1a02d813d01c2

      # update LLVM to 11.1.0-rc3
      cd $LLVMGOLLVM
      git checkout 1fdec59bffc11ae37eb51a1b9869f0696bfd5312

      cd $LLVMGOLLVM/llvm/tools/gollvm
      git checkout 44a7a475cfd3b871b7a5a0941b8ab1ea9d489adc

      cd $LLVMGOLLVM/llvm/tools/gollvm/gofrontend
      git checkout be0d2cc2df9f98d967c242594838f86362dae2e7

      cd $LLVMGOLLVM/llvm/tools/gollvm/libgo/libffi
      git checkout 737d4faa00d681b4c758057f67e1a02d813d01c2

      cd $LLVMGOLLVM/llvm/tools/gollvm/libgo/libbacktrace
      git checkout 5a99ff7fed66b8ea8f09c9805c138524a7035ece
      #+end_src

    - Compiling Gollvm

      #+begin_src sh
      mkdir -p $LLVMDIR/gollvm
      export GOLLVMDIR=$LLVMDIR/gollvm

      mkdir -p $LLVMGOLLVM/build
      cd $LLVMGOLLVM/build

      # IMPORTANT: make sure to use clang and clang++ version 11
      CC=clang CXX=clang++ \
        cmake ../llvm -DCMAKE_INSTALL_PREFIX=$GOLLVMDIR \
        -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_RTTI=ON \
        -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_LINKER=gold -G Ninja

      ninja gollvm
      ninja install # or ninja install-gollvm
      #+end_src

      After that, the gollvm compiler is installed to ~$GOLLVMDIR/bin~.

    - Caputure LLVM bitcode generated by Gollvm: see ~README.md~ of
      ~llvm-project/llvm/tools/gollvm~.

*** OCaml for development

    - Currently, we are using 4.12.0, or newer.

      #+begin_src sh
      sudo apt-get install opam
      opam init
      opam switch create 4.12.0
      eval $(opam env)
      opam install core menhir dune extlib ocamlgraph ppx_deriving \
           fileutils llvm yaml
      #+end_src

** Compilation

   - Download source code:

     #+begin_src sh
     export WORKDIR=$HOME/workspace           # or any other working directory
     cd $WORKDIR
     git clone https://github.com/sbip-sg/discover-analyzer
     git clone https://github.com/sbip-sg/llvm-normalizer
     #+end_src

   - Compile ~discover~:

     #+begin_src sh
     cd $WORKDIR/discover-analyzer
     make
     #+end_src

   - Compile ~llvm-normalizer~:

     #+begin_src sh
     cd $WORKDIR/llvm-normalizer
     mkdir -p build; cd build; cmake ..
     make
     #+end_src

   - After that, copy the file ~llvm-normalizer/build/normalizer~ to the root
     project folder ~discover~:

     #+begin_src sh
     cp $WORKDIR/llvm-normalizer/build/normalizer $WORKDIR/discover-analyzer/
     #+end_src

* Run Discover

  - Run pointer analysis on C program:

    #+begin_src sh
    cd discover
    ./discover --clang-option "-I ./lib/discover" --dfa-pointer --dfa-inter \
               examples/c/field-read.c
    #+end_src

* Development

  - See ~docs/development.md~.
